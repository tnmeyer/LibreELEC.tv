diff -rNu linux-amlogic-3.10-c8d5b2f.orig/drivers/amlogic/thermal/amlogic_thermal.c linux-amlogic-3.10-c8d5b2f/drivers/amlogic/thermal/amlogic_thermal.c
--- linux-amlogic-3.10-c8d5b2f.orig/drivers/amlogic/thermal/amlogic_thermal.c	2016-05-08 13:35:26.588221459 +0200
+++ linux-amlogic-3.10-c8d5b2f/drivers/amlogic/thermal/amlogic_thermal.c	2016-05-08 14:21:05.000000000 +0200
@@ -374,16 +374,6 @@
 #ifdef CONFIG_AML_VIRTUAL_THERMAL
 #define ABS(a) ((a) > 0 ? (a) : -(a))
 
-static unsigned int (*gpu_freq_callback)(void) = NULL;
-int register_gpu_freq_info(unsigned int (*fun)(void))
-{
-    if (fun) {
-        gpu_freq_callback = fun;
-    }
-    return 0;
-}
-EXPORT_SYMBOL(register_gpu_freq_info);
-
 static atomic_t last_gpu_avg_freq;
 static atomic_t last_cpu_avg_freq;
 static atomic_t freq_update_flag;
@@ -402,11 +392,8 @@
         total_cpu_freq += 0;
     }
 
-    if (gpu_freq_callback) {
-        total_gpu_freq += gpu_freq_callback();
-    } else {
-        total_gpu_freq += 0;
-    }
+    total_gpu_freq += 0;
+    
     if (count >= freq_sample_period * 10) {
         atomic_set(&last_cpu_avg_freq, total_cpu_freq / count);
         atomic_set(&last_gpu_avg_freq, total_gpu_freq / count);
diff -rNu linux-amlogic-3.10-c8d5b2f.orig/drivers/amlogic/thermal/amlogic_thermal.h linux-amlogic-3.10-c8d5b2f/drivers/amlogic/thermal/amlogic_thermal.h
--- linux-amlogic-3.10-c8d5b2f.orig/drivers/amlogic/thermal/amlogic_thermal.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-amlogic-3.10-c8d5b2f/drivers/amlogic/thermal/amlogic_thermal.h	2016-05-08 12:03:43.000000000 +0200
@@ -0,0 +1,105 @@
+
+#ifndef __AMLOGIC_THERMAL_H__
+#define __AMLOGIC_THERMAL_H__
+
+struct record_buf {
+    int idx;
+    int max;
+    unsigned long cool_flag;
+    unsigned int *op;
+};
+
+struct cpu_stat_monitor {
+    unsigned int total_cpu_freq;
+    unsigned int total_gpu_freq;
+    unsigned int total_cpu_cores;
+    unsigned int total_gpu_cores;
+    unsigned int avg_cpu_freq;
+    unsigned int avg_gpu_freq;
+    unsigned int avg_cpu_cores;
+    unsigned int avg_gpu_cores;
+    unsigned int filter_temp;
+};
+
+struct aml_virtual_thermal {
+    unsigned int freq;
+    unsigned int temp_time[4];
+};
+
+struct aml_virtual_thermal_device {
+    int count;
+    struct aml_virtual_thermal *thermal;
+};
+
+struct temp_trip{
+    unsigned int temperature;
+    unsigned int cpu_upper_freq;
+    unsigned int cpu_lower_freq;
+    int cpu_upper_level;
+    int cpu_lower_level;
+    unsigned int gpu_upper_freq;
+    unsigned int gpu_lower_freq;
+    int gpu_upper_level;
+    int gpu_lower_level;
+    int cpu_core_num;
+    int cpu_core_upper;
+    int gpu_core_num;
+    int gpu_core_upper;
+};
+
+struct amlogic_thermal_platform_data {
+    const char *name;
+    struct temp_trip *tmp_trip;
+    unsigned int temp_trip_count;
+    unsigned int current_temp;
+    unsigned int idle_interval;
+    unsigned int trim_flag;
+    unsigned int virtual_thermal_en;
+    unsigned int keep_mode;
+    unsigned int keep_mode_threshold;
+    unsigned int keep_mode_ini_state[4];
+    unsigned int keep_mode_cur_state[4];
+    unsigned int keep_mode_max_state[4];
+    unsigned int keep_mode_max_range[4];
+    unsigned int freq_sample_period;
+    struct record_buf op_buf;
+    struct cpu_stat_monitor monitor;
+    struct thermal_zone_device *therm_dev;
+    struct thermal_cooling_device *cpu_cool_dev;
+    struct thermal_cooling_device *gpu_cool_dev;
+    struct thermal_cooling_device *cpucore_cool_dev;
+    struct thermal_cooling_device *gpucore_cool_dev;
+    enum thermal_device_mode mode;
+    struct mutex lock;
+    struct delayed_work thermal_work;
+};
+
+struct temp_level{
+    unsigned int temperature;
+    int cpu_high_freq;
+    int cpu_low_freq;
+    int gpu_high_freq;
+    int gpu_low_freq;
+    int cpu_core_num;
+    int gpu_core_num;
+};
+
+struct freq_trip_table {
+    unsigned int freq_state;
+};
+
+void *thermal_alloc(size_t len);
+extern int thermal_debug_enable;
+extern int high_temp_protect;
+extern atomic_t freq_update_flag;
+
+void thermal_atomic_set(atomic_t *a, int);
+void thermal_lock(struct mutex *lock);
+void thermal_unlock(struct mutex *lock);
+void keep_mode_set_mode(struct amlogic_thermal_platform_data *);
+void keep_mode_bind(struct  amlogic_thermal_platform_data *, unsigned long , int );
+void keep_mode_work(struct amlogic_thermal_platform_data *, int);
+void keep_mode_update_threshold(struct amlogic_thermal_platform_data *, int );
+void keep_mode_temp_level_init(struct amlogic_thermal_platform_data *, struct temp_level *);
+
+#endif /* __AMLOGIC_THERMAL_H__ */
diff -rNu linux-amlogic-3.10-c8d5b2f.orig/drivers/amlogic/thermal/Kconfig linux-amlogic-3.10-c8d5b2f/drivers/amlogic/thermal/Kconfig
--- linux-amlogic-3.10-c8d5b2f.orig/drivers/amlogic/thermal/Kconfig	2016-05-08 13:35:26.588221459 +0200
+++ linux-amlogic-3.10-c8d5b2f/drivers/amlogic/thermal/Kconfig	2016-05-08 13:40:10.619056697 +0200
@@ -4,10 +4,25 @@
 config AML_VIRTUAL_THERMAL
     bool "Amlogic virtual thermal interface"
     default y
-    help
+    help 
         Say Y if you want use amlogic virtual thermal interface
+
 config AML_PLATFORM_THERMAL 
     bool "Amlogic platform thermal interface"
-    default n
+    default y
     help 
-    Say Y if you want use amlogic platform thermal interface
+        Say Y if you want use amlogic platform thermal interface
+
+config AMLOGIC_THERMAL
+    tristate "amlogic thermal support"
+    select THERMAL
+    select CPU_THERMAL
+    select GPU_THERMAL
+    select CPUCORE_THERMAL
+    select GPUCORE_THERMAL
+    select AML_VIRTUAL_THERMAL 
+    select AML_PLATFORM_THERMAL
+    depends on CPU_FREQ
+    default y
+    help
+      This is the Amlogic Thermal interface driver
