From efe6d9290b8ccf2fe1cddda50fd7df05fa876b83 Mon Sep 17 00:00:00 2001
From: Voyager1 <voyager@xbmc.org>
Date: Thu, 25 May 2017 08:55:38 +0200
Subject: [PATCH 1/2] [DVD] add libdvd 5.0.3 definitions for streamable ISOs

---
 xbmc/cores/VideoPlayer/DVDInputStreams/DllDvdNav.h         | 5 +++++
 xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h | 8 ++++++++
 xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvdnav.h     | 2 ++
 xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/vm.h         | 2 +-
 4 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DllDvdNav.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DllDvdNav.h
index 52678b91a5d3..7ae31dcb564f 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DllDvdNav.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DllDvdNav.h
@@ -49,6 +49,7 @@ class DllDvdNavInterface
 public:
   virtual ~DllDvdNavInterface() {}
   virtual dvdnav_status_t dvdnav_open(dvdnav_t **dest, const char *path)=0;
+  virtual dvdnav_status_t dvdnav_open_stream(dvdnav_t **dest, void *stream, dvdnav_stream_cb *stream_cb) = 0;
   virtual dvdnav_status_t dvdnav_close(dvdnav_t *self)=0;
   virtual dvdnav_status_t dvdnav_reset(dvdnav_t *self)=0;
   virtual const char* dvdnav_err_to_string(dvdnav_t *self)=0;
@@ -122,6 +123,8 @@ class DllDvdNav : public DllDynamic, DllDvdNavInterface
     virtual ~DllDvdNav() {}
     virtual dvdnav_status_t dvdnav_open(dvdnav_t **dest, const char *path)
         { return ::dvdnav_open(dest, path); }
+    virtual dvdnav_status_t dvdnav_open_stream(dvdnav_t **dest, void *stream, dvdnav_stream_cb *stream_cb)
+        { return ::dvdnav_open_stream(dest, stream, stream_cb); }
     virtual dvdnav_status_t dvdnav_close(dvdnav_t *self)
         { return ::dvdnav_close(self); }
     virtual dvdnav_status_t dvdnav_reset(dvdnav_t *self)
@@ -254,6 +257,7 @@ class DllDvdNav : public DllDynamic, DllDvdNavInterface
   DECLARE_DLL_WRAPPER(DllDvdNav, DLL_PATH_LIBDVDNAV)
 
   DEFINE_METHOD2(dvdnav_status_t, dvdnav_open, (dvdnav_t **p1, const char *p2))
+  DEFINE_METHOD3(dvdnav_status_t, dvdnav_open_stream, (dvdnav_t **p1, void *p2, dvdnav_stream_cb *p3))
   DEFINE_METHOD1(dvdnav_status_t, dvdnav_close, (dvdnav_t *p1))
   DEFINE_METHOD1(dvdnav_status_t, dvdnav_reset, (dvdnav_t *p1))
   DEFINE_METHOD1(const char*, dvdnav_err_to_string, (dvdnav_t *p1))
@@ -319,6 +323,7 @@ class DllDvdNav : public DllDynamic, DllDvdNavInterface
   DEFINE_METHOD3(int, dvdnav_get_video_resolution, (dvdnav_t* p1, uint32_t* p2, uint32_t* p3))
   BEGIN_METHOD_RESOLVE()
     RESOLVE_METHOD(dvdnav_open)
+    RESOLVE_METHOD(dvdnav_open_stream)
     RESOLVE_METHOD(dvdnav_close)
     RESOLVE_METHOD(dvdnav_reset)
     RESOLVE_METHOD(dvdnav_err_to_string)
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h b/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h
index 3ce8bc325efe..4399445109e7 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h
@@ -69,6 +69,14 @@ typedef struct dvd_reader_s dvd_reader_t;
  */
 typedef struct dvd_file_s dvd_file_t;
 
+struct dvd_reader_stream_cb
+{
+  int(*pf_seek)  (void *p_stream, uint64_t i_pos);
+  int(*pf_read)  (void *p_stream, void* buffer, int i_read);
+  int(*pf_readv) (void *p_stream, void *p_iovec, int i_blocks);
+};
+typedef struct dvd_reader_stream_cb dvd_reader_stream_cb;
+
 /**
  * Public type that is used to provide statistics on a handle.
  */
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvdnav.h b/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvdnav.h
index ea3bce0ee6d4..9bc780e1f7ff 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvdnav.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvdnav.h
@@ -55,6 +55,7 @@ typedef struct dvdnav_s dvdnav_t;
 /* Status as reported by most of libdvdnav's functions */
 typedef int32_t dvdnav_status_t;
 
+typedef dvd_reader_stream_cb dvdnav_stream_cb;
 /*
  * Unless otherwise stated, all functions return DVDNAV_STATUS_OK if
  * they succeeded, otherwise DVDNAV_STATUS_ERR is returned and the error may
@@ -88,6 +89,7 @@ typedef int32_t dvdnav_status_t;
  * The resulting dvdnav_t handle will be written to *dest.
  */
 dvdnav_status_t dvdnav_open(dvdnav_t **dest, const char *path);
+dvdnav_status_t dvdnav_open_stream(dvdnav_t **dest, void *stream, dvdnav_stream_cb *stream_cb);
 
 /*
  * Closes a dvdnav_t previously opened with dvdnav_open(), freeing any 
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/vm.h b/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/vm.h
index 07d4d28158dc..c211697363bc 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/vm.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/vm.h
@@ -127,7 +127,7 @@ dvd_reader_t *vm_get_dvd_reader(vm_t *vm);
 /* Basic Handling */
 int  vm_start(vm_t *vm);
 void vm_stop(vm_t *vm);
-int  vm_reset(vm_t *vm, const char *dvdroot);
+int  vm_reset(vm_t *vm, const char *dvdroot, void *stream, dvdnav_stream_cb *stream_cb);
 
 /* copying and merging  - useful for try-running an operation */
 vm_t *vm_new_copy(vm_t *vm);

From d28798154265a9b05845caa066698d7c88953331 Mon Sep 17 00:00:00 2001
From: Voyager1 <voyager@xbmc.org>
Date: Thu, 25 May 2017 11:49:31 +0200
Subject: [PATCH 2/2] [DVD] add streaming callback functions and open DVD
 images using the libdvd streaming API

---
 xbmc/cores/DllLoader/exports/emu_msvcrt.cpp        |  2 +-
 .../DVDInputStreams/DVDInputStreamNavigator.cpp    | 82 +++++++++++++++++++++-
 .../DVDInputStreams/DVDInputStreamNavigator.h      |  3 +
 .../DVDInputStreams/dvdnav/dvd_reader.h            | 13 ++++
 4 files changed, 98 insertions(+), 2 deletions(-)

diff --git a/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp b/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
index 1fc5521586db..6399712af7ac 100644
--- a/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
+++ b/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
@@ -660,7 +660,7 @@ extern "C"
       delete pFile;
       return 0;
     }
-    else if (!IS_STD_DESCRIPTOR(fd))
+    else if (!IS_STD_DESCRIPTOR(fd) && fd >= 0)
     {
       // it might be something else than a file, or the file is not emulated
       // let the operating system handle it
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
index 6605615cbb8e..c376765df20f 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.cpp
@@ -39,8 +39,12 @@
 #define HOLDMODE_SKIP 2 /* set by inputstream user, when they wish to skip the held mode */
 #define HOLDMODE_DATA 3 /* set after hold mode has been exited, and action that inited it has been executed */
 
+static int dvd_inputstreamnavigator_cb_seek(void * p_stream, uint64_t i_pos);
+static int dvd_inputstreamnavigator_cb_read(void * p_stream, void * buffer, int i_read);
+static int dvd_inputstreamnavigator_cb_readv(void * p_stream, void * p_iovec, int i_blocks);
+
 CDVDInputStreamNavigator::CDVDInputStreamNavigator(IVideoPlayer* player, const CFileItem& fileitem)
-  : CDVDInputStream(DVDSTREAM_TYPE_DVD, fileitem)
+  : CDVDInputStream(DVDSTREAM_TYPE_DVD, fileitem), m_pstream(nullptr)
 {
   m_dvdnav = 0;
   m_pVideoPlayer = player;
@@ -56,6 +60,9 @@ CDVDInputStreamNavigator::CDVDInputStreamNavigator(IVideoPlayer* player, const C
   m_iTime = m_iTotalTime = 0;
   m_bEOF = false;
   m_lastevent = DVDNAV_NOP;
+  m_dvdnav_stream_cb.pf_read = dvd_inputstreamnavigator_cb_read;
+  m_dvdnav_stream_cb.pf_readv = dvd_inputstreamnavigator_cb_readv;
+  m_dvdnav_stream_cb.pf_seek = dvd_inputstreamnavigator_cb_seek;
 
   memset(m_lastblock, 0, sizeof(m_lastblock));
 }
@@ -98,6 +105,18 @@ bool CDVDInputStreamNavigator::Open()
 #endif
 
   // open up the DVD device
+  if (m_item.IsDiscImage())
+  {
+    // if dvd image file (ISO or alike) open using libdvdnav stream callback functions
+    m_pstream.reset(new CDVDInputStreamFile(m_item));
+    if (!m_pstream->Open() || m_dll.dvdnav_open_stream(&m_dvdnav, m_pstream.get(), &m_dvdnav_stream_cb) != DVDNAV_STATUS_OK)
+    {
+      CLog::Log(LOGERROR, "Error opening image file or Error on dvdnav_open_stream\n");
+      Close();
+      return false;
+    }
+  }
+  else
   if (m_dll.dvdnav_open(&m_dvdnav, path.c_str()) != DVDNAV_STATUS_OK)
   {
     CLog::Log(LOGERROR,"Error on dvdnav_open\n");
@@ -229,6 +248,12 @@ void CDVDInputStreamNavigator::Close()
   CDVDInputStream::Close();
   m_dvdnav = NULL;
   m_bEOF = true;
+
+  if (m_pstream != nullptr)
+  {
+    m_pstream->Close();
+    m_pstream.reset();
+  }
 }
 
 int CDVDInputStreamNavigator::Read(uint8_t* buf, int buf_size)
@@ -1560,3 +1585,58 @@ DVDNavVideoStreamInfo CDVDInputStreamNavigator::GetVideoStreamInfo()
 
   return info;
 }
+
+int dvd_inputstreamnavigator_cb_seek(void * p_stream, uint64_t i_pos)
+{
+  CDVDInputStreamFile *lpstream = reinterpret_cast<CDVDInputStreamFile*>(p_stream);
+  if (lpstream->Seek(i_pos, 0) >= 0)
+    return 0;
+  else
+    return -1;
+}
+
+int dvd_inputstreamnavigator_cb_read(void * p_stream, void * buffer, int i_read)
+{
+  CDVDInputStreamFile *lpstream = reinterpret_cast<CDVDInputStreamFile*>(p_stream);
+  return lpstream->Read(reinterpret_cast<uint8_t *>(buffer), i_read);
+}
+
+int dvd_inputstreamnavigator_cb_readv(void * p_stream, void * p_iovec, int i_blocks)
+{
+  // NOTE/TODO: this vectored read callback somehow doesn't seem to be called by libdvdnav.
+  // Therefore, the code below isn't really tested, but inspired from the libc_readv code for Win32 in libdvdcss (device.c:713). 
+  CDVDInputStreamFile *lpstream = reinterpret_cast<CDVDInputStreamFile*>(p_stream);
+  const struct iovec* lpiovec = reinterpret_cast<const struct iovec*>(p_iovec);
+
+  int i_index, i_len, i_total = 0;
+  unsigned char *p_base;
+  int i_bytes;
+
+  for (i_index = i_blocks; i_index; i_index--, lpiovec++)
+  {
+    i_len = lpiovec->iov_len;
+    p_base = reinterpret_cast<unsigned char*>(lpiovec->iov_base);
+
+    if (i_len <= 0)
+      continue;
+
+    i_bytes = lpstream->Read(p_base, i_len);
+    if (i_bytes < 0)
+      return -1;
+    else
+      i_total += i_bytes;
+
+    if (i_bytes != i_len)
+    {
+      /* We reached the end of the file or a signal interrupted
+      * the read. Return a partial read. */
+      int i_seek = lpstream->Seek(i_total,0);
+      if (i_seek < 0)
+        return i_seek;
+
+      /* We have to return now so that i_pos isn't clobbered */
+      return i_total;
+    }
+  }
+  return i_total;
+}
\ No newline at end of file
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.h
index 58d1e32e6ace..82d999ad5078 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamNavigator.h
@@ -28,6 +28,7 @@
 #include "guilib/Geometry.h"
 
 #include "DllDvdNav.h"
+#include "DVDInputStreamFile.h"
 
 #define DVD_VIDEO_BLOCKSIZE         DVD_VIDEO_LB_LEN // 2048 bytes
 
@@ -217,6 +218,8 @@ class CDVDInputStreamNavigator
   int m_iPart;
 
   struct dvdnav_s* m_dvdnav;
+  dvdnav_stream_cb m_dvdnav_stream_cb;
+  std::unique_ptr<CDVDInputStreamFile> m_pstream;
 
   IVideoPlayer* m_pVideoPlayer;
 
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h b/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h
index 4399445109e7..d8092b437634 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/dvdnav/dvd_reader.h
@@ -33,6 +33,19 @@
 #include <sys/types.h>
 //#include <inttypes.h>
 
+/*****************************************************************************
+* iovec structure: vectored data entry
+*****************************************************************************/
+#ifdef TARGET_WINDOWS
+struct iovec
+{
+  void *iov_base;     /* Pointer to data. */
+  size_t iov_len;     /* Length of data.  */
+};
+#else
+#   include <sys/uio.h>                                      /* struct iovec */
+#endif
+
 /**
  * The DVD access interface.
  *
