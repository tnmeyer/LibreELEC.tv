diff -rNu linux-amlogic-2f04daa14766861481ec0f80bfd0894b4c8c9fe0.orig/arch/arm64/boot/dts/amlogic/mesongxbb.dtsi linux-amlogic-2f04daa14766861481ec0f80bfd0894b4c8c9fe0/arch/arm64/boot/dts/amlogic/mesongxbb.dtsi
--- linux-amlogic-2f04daa14766861481ec0f80bfd0894b4c8c9fe0.orig/arch/arm64/boot/dts/amlogic/mesongxbb.dtsi	2017-03-17 21:42:20.356810451 +0100
+++ linux-amlogic-2f04daa14766861481ec0f80bfd0894b4c8c9fe0/arch/arm64/boot/dts/amlogic/mesongxbb.dtsi	2017-03-18 11:51:59.673305601 +0100
@@ -606,10 +606,11 @@
 	meson_ir:meson-ir {
 		compatible = "amlogic,meson-gxbb-ir";
 		status = "disabled";
-		reg = <0x0 0xc8100580 0x0 0x40>;
+		reg = <0x0 0xc8100580 0x0 0x20>;
 		interrupts = <0 196 1>;
 		pinctrl-names = "default";
 		pinctrl-0 = <&remote_pins>;
+		pulse-inverted;
 	};
 
 	rng {
diff -rNu linux-amlogic-2f04daa14766861481ec0f80bfd0894b4c8c9fe0.orig/drivers/media/rc/meson-ir.c linux-amlogic-2f04daa14766861481ec0f80bfd0894b4c8c9fe0/drivers/media/rc/meson-ir.c
--- linux-amlogic-2f04daa14766861481ec0f80bfd0894b4c8c9fe0.orig/drivers/media/rc/meson-ir.c	2017-03-17 21:42:18.733529735 +0100
+++ linux-amlogic-2f04daa14766861481ec0f80bfd0894b4c8c9fe0/drivers/media/rc/meson-ir.c	2017-03-17 23:53:55.808875321 +0100
@@ -19,13 +19,13 @@
 #include <linux/of_platform.h>
 #include <linux/platform_device.h>
 #include <linux/spinlock.h>
-#include <linux/pinctrl/consumer.h>
 
 #include <media/rc-core.h>
 
+#include <linux/amlogic/iomap.h>
+
 #define DRIVER_NAME		"meson-ir"
 
-/* valid on all Meson platforms */
 #define IR_DEC_LDR_ACTIVE	0x00
 #define IR_DEC_LDR_IDLE		0x04
 #define IR_DEC_LDR_REPEAT	0x08
@@ -34,21 +34,12 @@
 #define IR_DEC_FRAME		0x14
 #define IR_DEC_STATUS		0x18
 #define IR_DEC_REG1		0x1c
-/* only available on Meson 8b and newer */
-#define IR_DEC_REG2		0x20
 
 #define REG0_RATE_MASK		(BIT(11) - 1)
 
-#define DECODE_MODE_NEC		0x0
-#define DECODE_MODE_RAW		0x2
-
-/* Meson 6b uses REG1 to configure the mode */
-#define REG1_MODE_MASK		GENMASK(8, 7)
-#define REG1_MODE_SHIFT		7
-
-/* Meson 8b / GXBB use REG2 to configure the mode */
-#define REG2_MODE_MASK		GENMASK(3, 0)
-#define REG2_MODE_SHIFT		0
+#define REG1_MODE_MASK		(BIT(7) | BIT(8))
+#define REG1_MODE_NEC		(0 << 7)
+#define REG1_MODE_GENERAL	(2 << 7)
 
 #define REG1_TIME_IV_SHIFT	16
 #define REG1_TIME_IV_MASK	((BIT(13) - 1) << REG1_TIME_IV_SHIFT)
@@ -59,6 +50,8 @@
 #define REG1_IRQSEL_FALL	(2 << 2)
 #define REG1_IRQSEL_RISE	(3 << 2)
 
+#define REG1_POL                BIT(1)
+
 #define REG1_RESET		BIT(0)
 #define REG1_ENABLE		BIT(15)
 
@@ -66,6 +59,8 @@
 
 #define MESON_TRATE		10	/* us */
 
+#define AO_RTI_PIN_MUX_REG (0x14)
+
 struct meson_ir {
 	void __iomem	*reg;
 	struct rc_dev	*rc;
@@ -87,18 +82,11 @@
 static irqreturn_t meson_ir_irq(int irqno, void *dev_id)
 {
 	struct meson_ir *ir = dev_id;
-	u32 duration;
-	DEFINE_IR_RAW_EVENT(rawir);
-
 	spin_lock(&ir->lock);
 
-	duration = readl(ir->reg + IR_DEC_REG1);
-	duration = (duration & REG1_TIME_IV_MASK) >> REG1_TIME_IV_SHIFT;
-	rawir.duration = US_TO_NS(duration * MESON_TRATE);
-
-	rawir.pulse = !!(readl(ir->reg + IR_DEC_STATUS) & STATUS_IR_DEC_IN);
-
-	ir_raw_event_store(ir->rc, &rawir);
+	ir_raw_event_store_edge(ir->rc,
+		(readl(ir->reg + IR_DEC_STATUS) & STATUS_IR_DEC_IN)
+		? IR_PULSE : IR_SPACE);
 	ir_raw_event_handle(ir->rc);
 
 	spin_unlock(&ir->lock);
@@ -113,8 +101,9 @@
 	struct resource *res;
 	const char *map_name;
 	struct meson_ir *ir;
+	bool pulse_inverted = false;
 	int ret;
-	struct pinctrl *pinctrl;
+	unsigned int reg_val;
 
 	ir = devm_kzalloc(dev, sizeof(struct meson_ir), GFP_KERNEL);
 	if (!ir)
@@ -151,6 +140,7 @@
 	ir->rc->rx_resolution = US_TO_NS(MESON_TRATE);
 	ir->rc->timeout = MS_TO_NS(200);
 	ir->rc->driver_name = DRIVER_NAME;
+	pulse_inverted = of_property_read_bool(node, "pulse-inverted");
 
 	spin_lock_init(&ir->lock);
 	platform_set_drvdata(pdev, ir);
@@ -161,38 +151,33 @@
 		goto out_free;
 	}
 
-	if (of_get_property(node, "pinctrl-names", NULL)) {
-		pinctrl = devm_pinctrl_get_select_default(dev);
-		if (IS_ERR(pinctrl)) {
-			dev_err(dev, "failed to get pinctrl\n");
-			ret = PTR_ERR(pinctrl);
-			goto out_unreg;
-		}
-	}
-
 	ret = devm_request_irq(dev, ir->irq, meson_ir_irq, 0, "ir-meson", ir);
 	if (ret) {
 		dev_err(dev, "failed to request irq\n");
 		goto out_unreg;
 	}
 
+	/* Set remote_input alternative function - GPIOAO.BIT7 */
+	reg_val = aml_read_aobus(AO_RTI_PIN_MUX_REG);
+	reg_val |= 0x1;
+	aml_write_aobus(AO_RTI_PIN_MUX_REG, reg_val);
+
+	reg_val = aml_read_aobus(AO_RTI_PIN_MUX_REG);
+	dev_info(dev, "AO_RTI_PIN_MUX : 0x%x\n", reg_val);
+
 	/* Reset the decoder */
 	meson_ir_set_mask(ir, IR_DEC_REG1, REG1_RESET, REG1_RESET);
 	meson_ir_set_mask(ir, IR_DEC_REG1, REG1_RESET, 0);
-
-	/* Set general operation mode (= raw/software decoding) */
-	if (of_device_is_compatible(node, "amlogic,meson6-ir"))
-		meson_ir_set_mask(ir, IR_DEC_REG1, REG1_MODE_MASK,
-				  DECODE_MODE_RAW << REG1_MODE_SHIFT);
-	else
-		meson_ir_set_mask(ir, IR_DEC_REG2, REG2_MODE_MASK,
-				  DECODE_MODE_RAW << REG2_MODE_SHIFT);
-
+	/* Set general operation mode */
+	meson_ir_set_mask(ir, IR_DEC_REG1, REG1_MODE_MASK, REG1_MODE_GENERAL);
 	/* Set rate */
 	meson_ir_set_mask(ir, IR_DEC_REG0, REG0_RATE_MASK, MESON_TRATE - 1);
 	/* IRQ on rising and falling edges */
 	meson_ir_set_mask(ir, IR_DEC_REG1, REG1_IRQSEL_MASK,
-			  REG1_IRQSEL_RISE_FALL);
+			REG1_IRQSEL_RISE_FALL);
+	/* Set polarity Invert input polarity */
+	meson_ir_set_mask(ir, IR_DEC_REG1, REG1_POL,
+			pulse_inverted ? REG1_POL : 0);
 	/* Enable the decoder */
 	meson_ir_set_mask(ir, IR_DEC_REG1, REG1_ENABLE, REG1_ENABLE);
 
@@ -223,29 +208,6 @@
 	return 0;
 }
 
-static void meson_ir_shutdown(struct platform_device *pdev)
-{
-	struct device *dev = &pdev->dev;
-	struct device_node *node = dev->of_node;
-	struct meson_ir *ir = platform_get_drvdata(pdev);
-	unsigned long flags;
-
-	spin_lock_irqsave(&ir->lock, flags);
-
-	/* Set operation mode to NEC/hardware decoding to give uboot a chance to power on the device */
-	if (of_device_is_compatible(node, "amlogic,meson6-ir"))
-		meson_ir_set_mask(ir, IR_DEC_REG1, REG1_MODE_MASK,
-				  DECODE_MODE_NEC << REG1_MODE_SHIFT);
-	else
-		meson_ir_set_mask(ir, IR_DEC_REG2, REG2_MODE_MASK,
-				  DECODE_MODE_NEC << REG2_MODE_SHIFT);
-
-	/* Set rate to default value */
-	meson_ir_set_mask(ir, IR_DEC_REG0, REG0_RATE_MASK, 0x13);
-
-	spin_unlock_irqrestore(&ir->lock, flags);
-}
-
 static const struct of_device_id meson_ir_match[] = {
 	{ .compatible = "amlogic,meson6-ir" },
 	{ .compatible = "amlogic,meson8b-ir" },
@@ -256,7 +218,6 @@
 static struct platform_driver meson_ir_driver = {
 	.probe		= meson_ir_probe,
 	.remove		= meson_ir_remove,
-	.shutdown	= meson_ir_shutdown,
 	.driver = {
 		.name		= DRIVER_NAME,
 		.of_match_table	= meson_ir_match,
